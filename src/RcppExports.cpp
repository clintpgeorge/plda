// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lda_cgs
List lda_cgs(unsigned int num_topics, unsigned int vocab_size, List docs_tf, double alpha_h, double eta_h, unsigned int max_iter, unsigned int burn_in, unsigned int spacing, bool save_z, bool save_theta, bool save_beta, bool save_lp, int verbose, double test_set_share);
RcppExport SEXP _plda_lda_cgs(SEXP num_topicsSEXP, SEXP vocab_sizeSEXP, SEXP docs_tfSEXP, SEXP alpha_hSEXP, SEXP eta_hSEXP, SEXP max_iterSEXP, SEXP burn_inSEXP, SEXP spacingSEXP, SEXP save_zSEXP, SEXP save_thetaSEXP, SEXP save_betaSEXP, SEXP save_lpSEXP, SEXP verboseSEXP, SEXP test_set_shareSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type num_topics(num_topicsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type vocab_size(vocab_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type docs_tf(docs_tfSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_h(alpha_hSEXP);
    Rcpp::traits::input_parameter< double >::type eta_h(eta_hSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< bool >::type save_z(save_zSEXP);
    Rcpp::traits::input_parameter< bool >::type save_theta(save_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_beta(save_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_lp(save_lpSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type test_set_share(test_set_shareSEXP);
    rcpp_result_gen = Rcpp::wrap(lda_cgs(num_topics, vocab_size, docs_tf, alpha_h, eta_h, max_iter, burn_in, spacing, save_z, save_theta, save_beta, save_lp, verbose, test_set_share));
    return rcpp_result_gen;
END_RCPP
}
// lda_cgs_v2
List lda_cgs_v2(unsigned int num_topics, unsigned int vocab_size, List docs_tf, double alpha_h, double eta_h, unsigned int max_iter, unsigned int burn_in, unsigned int spacing, bool save_z, bool save_theta, bool save_beta, bool save_lp, int verbose, double test_set_share, arma::umat beta_indices, arma::umat theta_indices);
RcppExport SEXP _plda_lda_cgs_v2(SEXP num_topicsSEXP, SEXP vocab_sizeSEXP, SEXP docs_tfSEXP, SEXP alpha_hSEXP, SEXP eta_hSEXP, SEXP max_iterSEXP, SEXP burn_inSEXP, SEXP spacingSEXP, SEXP save_zSEXP, SEXP save_thetaSEXP, SEXP save_betaSEXP, SEXP save_lpSEXP, SEXP verboseSEXP, SEXP test_set_shareSEXP, SEXP beta_indicesSEXP, SEXP theta_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type num_topics(num_topicsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type vocab_size(vocab_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type docs_tf(docs_tfSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_h(alpha_hSEXP);
    Rcpp::traits::input_parameter< double >::type eta_h(eta_hSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< bool >::type save_z(save_zSEXP);
    Rcpp::traits::input_parameter< bool >::type save_theta(save_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_beta(save_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_lp(save_lpSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type test_set_share(test_set_shareSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type beta_indices(beta_indicesSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type theta_indices(theta_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(lda_cgs_v2(num_topics, vocab_size, docs_tf, alpha_h, eta_h, max_iter, burn_in, spacing, save_z, save_theta, save_beta, save_lp, verbose, test_set_share, beta_indices, theta_indices));
    return rcpp_result_gen;
END_RCPP
}
// lda_fgs
List lda_fgs(unsigned int num_topics, unsigned int vocab_size, List docs_tf, double alpha_h, double eta_h, unsigned int max_iter, unsigned int burn_in, unsigned int spacing, bool save_z, bool save_theta, bool save_beta, bool save_lp, int verbose, double test_set_share);
RcppExport SEXP _plda_lda_fgs(SEXP num_topicsSEXP, SEXP vocab_sizeSEXP, SEXP docs_tfSEXP, SEXP alpha_hSEXP, SEXP eta_hSEXP, SEXP max_iterSEXP, SEXP burn_inSEXP, SEXP spacingSEXP, SEXP save_zSEXP, SEXP save_thetaSEXP, SEXP save_betaSEXP, SEXP save_lpSEXP, SEXP verboseSEXP, SEXP test_set_shareSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type num_topics(num_topicsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type vocab_size(vocab_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type docs_tf(docs_tfSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_h(alpha_hSEXP);
    Rcpp::traits::input_parameter< double >::type eta_h(eta_hSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< bool >::type save_z(save_zSEXP);
    Rcpp::traits::input_parameter< bool >::type save_theta(save_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_beta(save_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_lp(save_lpSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type test_set_share(test_set_shareSEXP);
    rcpp_result_gen = Rcpp::wrap(lda_fgs(num_topics, vocab_size, docs_tf, alpha_h, eta_h, max_iter, burn_in, spacing, save_z, save_theta, save_beta, save_lp, verbose, test_set_share));
    return rcpp_result_gen;
END_RCPP
}
// lda_fgs_opt
List lda_fgs_opt(unsigned int num_topics, unsigned int vocab_size, List docs_tf, double alpha_h, double eta_h, unsigned int max_iter, unsigned int burn_in, unsigned int spacing, bool save_z, bool save_theta, bool save_beta, bool save_lp, int verbose, double test_set_share);
RcppExport SEXP _plda_lda_fgs_opt(SEXP num_topicsSEXP, SEXP vocab_sizeSEXP, SEXP docs_tfSEXP, SEXP alpha_hSEXP, SEXP eta_hSEXP, SEXP max_iterSEXP, SEXP burn_inSEXP, SEXP spacingSEXP, SEXP save_zSEXP, SEXP save_thetaSEXP, SEXP save_betaSEXP, SEXP save_lpSEXP, SEXP verboseSEXP, SEXP test_set_shareSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type num_topics(num_topicsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type vocab_size(vocab_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type docs_tf(docs_tfSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_h(alpha_hSEXP);
    Rcpp::traits::input_parameter< double >::type eta_h(eta_hSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< bool >::type save_z(save_zSEXP);
    Rcpp::traits::input_parameter< bool >::type save_theta(save_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_beta(save_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_lp(save_lpSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type test_set_share(test_set_shareSEXP);
    rcpp_result_gen = Rcpp::wrap(lda_fgs_opt(num_topics, vocab_size, docs_tf, alpha_h, eta_h, max_iter, burn_in, spacing, save_z, save_theta, save_beta, save_lp, verbose, test_set_share));
    return rcpp_result_gen;
END_RCPP
}
// lda_fgs_opt_v2
List lda_fgs_opt_v2(unsigned int num_topics, unsigned int vocab_size, List docs_tf, double alpha_h, double eta_h, unsigned int max_iter, unsigned int burn_in, unsigned int spacing, bool save_z, bool save_theta, bool save_beta, bool save_lp, int verbose, double test_set_share, arma::umat beta_indices, arma::umat theta_indices);
RcppExport SEXP _plda_lda_fgs_opt_v2(SEXP num_topicsSEXP, SEXP vocab_sizeSEXP, SEXP docs_tfSEXP, SEXP alpha_hSEXP, SEXP eta_hSEXP, SEXP max_iterSEXP, SEXP burn_inSEXP, SEXP spacingSEXP, SEXP save_zSEXP, SEXP save_thetaSEXP, SEXP save_betaSEXP, SEXP save_lpSEXP, SEXP verboseSEXP, SEXP test_set_shareSEXP, SEXP beta_indicesSEXP, SEXP theta_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type num_topics(num_topicsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type vocab_size(vocab_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type docs_tf(docs_tfSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_h(alpha_hSEXP);
    Rcpp::traits::input_parameter< double >::type eta_h(eta_hSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< bool >::type save_z(save_zSEXP);
    Rcpp::traits::input_parameter< bool >::type save_theta(save_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_beta(save_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_lp(save_lpSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type test_set_share(test_set_shareSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type beta_indices(beta_indicesSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type theta_indices(theta_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(lda_fgs_opt_v2(num_topics, vocab_size, docs_tf, alpha_h, eta_h, max_iter, burn_in, spacing, save_z, save_theta, save_beta, save_lp, verbose, test_set_share, beta_indices, theta_indices));
    return rcpp_result_gen;
END_RCPP
}
// lda_pcgs
List lda_pcgs(unsigned int num_topics, unsigned int vocab_size, List docs_tf, double alpha_h, double eta_h, unsigned int max_iter, unsigned int burn_in, unsigned int spacing, bool save_z, bool save_theta, bool save_beta, bool save_lp, int verbose, double test_set_share);
RcppExport SEXP _plda_lda_pcgs(SEXP num_topicsSEXP, SEXP vocab_sizeSEXP, SEXP docs_tfSEXP, SEXP alpha_hSEXP, SEXP eta_hSEXP, SEXP max_iterSEXP, SEXP burn_inSEXP, SEXP spacingSEXP, SEXP save_zSEXP, SEXP save_thetaSEXP, SEXP save_betaSEXP, SEXP save_lpSEXP, SEXP verboseSEXP, SEXP test_set_shareSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type num_topics(num_topicsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type vocab_size(vocab_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type docs_tf(docs_tfSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_h(alpha_hSEXP);
    Rcpp::traits::input_parameter< double >::type eta_h(eta_hSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< bool >::type save_z(save_zSEXP);
    Rcpp::traits::input_parameter< bool >::type save_theta(save_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_beta(save_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_lp(save_lpSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type test_set_share(test_set_shareSEXP);
    rcpp_result_gen = Rcpp::wrap(lda_pcgs(num_topics, vocab_size, docs_tf, alpha_h, eta_h, max_iter, burn_in, spacing, save_z, save_theta, save_beta, save_lp, verbose, test_set_share));
    return rcpp_result_gen;
END_RCPP
}
// lda_pcgs_v2
List lda_pcgs_v2(unsigned int num_topics, unsigned int vocab_size, List docs_tf, double alpha_h, double eta_h, unsigned int max_iter, unsigned int burn_in, unsigned int spacing, bool save_z, bool save_theta, bool save_beta, bool save_lp, int verbose, double test_set_share, arma::umat beta_indices, arma::umat theta_indices);
RcppExport SEXP _plda_lda_pcgs_v2(SEXP num_topicsSEXP, SEXP vocab_sizeSEXP, SEXP docs_tfSEXP, SEXP alpha_hSEXP, SEXP eta_hSEXP, SEXP max_iterSEXP, SEXP burn_inSEXP, SEXP spacingSEXP, SEXP save_zSEXP, SEXP save_thetaSEXP, SEXP save_betaSEXP, SEXP save_lpSEXP, SEXP verboseSEXP, SEXP test_set_shareSEXP, SEXP beta_indicesSEXP, SEXP theta_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type num_topics(num_topicsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type vocab_size(vocab_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type docs_tf(docs_tfSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_h(alpha_hSEXP);
    Rcpp::traits::input_parameter< double >::type eta_h(eta_hSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< bool >::type save_z(save_zSEXP);
    Rcpp::traits::input_parameter< bool >::type save_theta(save_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_beta(save_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type save_lp(save_lpSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type test_set_share(test_set_shareSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type beta_indices(beta_indicesSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type theta_indices(theta_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(lda_pcgs_v2(num_topics, vocab_size, docs_tf, alpha_h, eta_h, max_iter, burn_in, spacing, save_z, save_theta, save_beta, save_lp, verbose, test_set_share, beta_indices, theta_indices));
    return rcpp_result_gen;
END_RCPP
}
// sample_antoniak
double sample_antoniak(unsigned int N, double alpha);
RcppExport SEXP _plda_sample_antoniak(SEXP NSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_antoniak(N, alpha));
    return rcpp_result_gen;
END_RCPP
}
// sample_multinomial
unsigned int sample_multinomial(const arma::vec& theta);
RcppExport SEXP _plda_sample_multinomial(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_multinomial(theta));
    return rcpp_result_gen;
END_RCPP
}
// sample_dirichlet
arma::vec sample_dirichlet(const unsigned int num_elements, const arma::vec& alpha);
RcppExport SEXP _plda_sample_dirichlet(SEXP num_elementsSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type num_elements(num_elementsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_dirichlet(num_elements, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_plda_lda_cgs", (DL_FUNC) &_plda_lda_cgs, 14},
    {"_plda_lda_cgs_v2", (DL_FUNC) &_plda_lda_cgs_v2, 16},
    {"_plda_lda_fgs", (DL_FUNC) &_plda_lda_fgs, 14},
    {"_plda_lda_fgs_opt", (DL_FUNC) &_plda_lda_fgs_opt, 14},
    {"_plda_lda_fgs_opt_v2", (DL_FUNC) &_plda_lda_fgs_opt_v2, 16},
    {"_plda_lda_pcgs", (DL_FUNC) &_plda_lda_pcgs, 14},
    {"_plda_lda_pcgs_v2", (DL_FUNC) &_plda_lda_pcgs_v2, 16},
    {"_plda_sample_antoniak", (DL_FUNC) &_plda_sample_antoniak, 2},
    {"_plda_sample_multinomial", (DL_FUNC) &_plda_sample_multinomial, 1},
    {"_plda_sample_dirichlet", (DL_FUNC) &_plda_sample_dirichlet, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_plda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
